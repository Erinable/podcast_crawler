(function() {
    var type_impls = Object.fromEntries([["podcast_crawler",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BelongingToDsl%3C(%26%5BParent%5D,+%26%5BParent%5D)%3E-for-Child\" class=\"impl\"><a href=\"#impl-BelongingToDsl%3C(%26%5BParent%5D,+%26%5BParent%5D)%3E-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Parent, Child&gt; BelongingToDsl&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Parent]</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Parent]</a>)&gt; for Child<div class=\"where\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a Parent</a>: Identifiable,\n    Child: HasTable + BelongsTo&lt;Parent&gt;,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a Parent</a> as Identifiable&gt;::Id&gt;: AsInExpression&lt;&lt;&lt;Child as BelongsTo&lt;Parent&gt;&gt;::ForeignKeyColumn as Expression&gt;::SqlType&gt;,\n    &lt;Child as HasTable&gt;::Table: FilterDsl&lt;Grouped&lt;In&lt;&lt;Child as BelongsTo&lt;Parent&gt;&gt;::ForeignKeyColumn, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a Parent</a> as Identifiable&gt;::Id&gt; as AsInExpression&lt;&lt;&lt;Child as BelongsTo&lt;Parent&gt;&gt;::ForeignKeyColumn as Expression&gt;::SqlType&gt;&gt;::InExpression&gt;&gt;&gt;,\n    &lt;Child as BelongsTo&lt;Parent&gt;&gt;::ForeignKeyColumn: ExpressionMethods,\n    &lt;&lt;Child as BelongsTo&lt;Parent&gt;&gt;::ForeignKeyColumn as Expression&gt;::SqlType: SqlType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;&lt;Child as HasTable&gt;::Table as FilterDsl&lt;Grouped&lt;In&lt;&lt;Child as BelongsTo&lt;Parent&gt;&gt;::ForeignKeyColumn, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a Parent</a> as Identifiable&gt;::Id&gt; as AsInExpression&lt;&lt;&lt;Child as BelongsTo&lt;Parent&gt;&gt;::ForeignKeyColumn as Expression&gt;::SqlType&gt;&gt;::InExpression&gt;&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The query returned by <code>belonging_to</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.belonging_to\" class=\"method trait-impl\"><a href=\"#method.belonging_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">belonging_to</a>(\n    parents: (&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Parent]</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Parent]</a>),\n) -&gt; &lt;Child as BelongingToDsl&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Parent]</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Parent]</a>)&gt;&gt;::Output</h4></section></summary><div class='docblock'>Get the record(s) belonging to record(s) <code>other</code></div></details></div></details>","BelongingToDsl<(&'a [Parent], &'a [Parent])>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A,)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A,)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A,)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A,)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L, M&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L, M) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L, M)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L, M, N&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L, M, N) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L, M, N)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N,+O)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N,+O)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N,+O,+P)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N,+O,+P)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0,)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0,)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + HasSqlType&lt;T23&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + HasSqlType&lt;T23&gt; + HasSqlType&lt;T24&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + HasSqlType&lt;T23&gt; + HasSqlType&lt;T24&gt; + HasSqlType&lt;T25&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + HasSqlType&lt;T23&gt; + HasSqlType&lt;T24&gt; + HasSqlType&lt;T25&gt; + HasSqlType&lt;T26&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + HasSqlType&lt;T23&gt; + HasSqlType&lt;T24&gt; + HasSqlType&lt;T25&gt; + HasSqlType&lt;T26&gt; + HasSqlType&lt;T27&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + HasSqlType&lt;T23&gt; + HasSqlType&lt;T24&gt; + HasSqlType&lt;T25&gt; + HasSqlType&lt;T26&gt; + HasSqlType&lt;T27&gt; + HasSqlType&lt;T28&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + HasSqlType&lt;T23&gt; + HasSqlType&lt;T24&gt; + HasSqlType&lt;T25&gt; + HasSqlType&lt;T26&gt; + HasSqlType&lt;T27&gt; + HasSqlType&lt;T28&gt; + HasSqlType&lt;T29&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29,+T30)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29,+T30)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + HasSqlType&lt;T23&gt; + HasSqlType&lt;T24&gt; + HasSqlType&lt;T25&gt; + HasSqlType&lt;T26&gt; + HasSqlType&lt;T27&gt; + HasSqlType&lt;T28&gt; + HasSqlType&lt;T29&gt; + HasSqlType&lt;T30&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29,+T30,+T31)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-HasSqlType%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29,+T30,+T31)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, __DB&gt; HasSqlType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31)</a>&gt; for __DB<div class=\"where\">where\n    __DB: HasSqlType&lt;T0&gt; + HasSqlType&lt;T1&gt; + HasSqlType&lt;T2&gt; + HasSqlType&lt;T3&gt; + HasSqlType&lt;T4&gt; + HasSqlType&lt;T5&gt; + HasSqlType&lt;T6&gt; + HasSqlType&lt;T7&gt; + HasSqlType&lt;T8&gt; + HasSqlType&lt;T9&gt; + HasSqlType&lt;T10&gt; + HasSqlType&lt;T11&gt; + HasSqlType&lt;T12&gt; + HasSqlType&lt;T13&gt; + HasSqlType&lt;T14&gt; + HasSqlType&lt;T15&gt; + HasSqlType&lt;T16&gt; + HasSqlType&lt;T17&gt; + HasSqlType&lt;T18&gt; + HasSqlType&lt;T19&gt; + HasSqlType&lt;T20&gt; + HasSqlType&lt;T21&gt; + HasSqlType&lt;T22&gt; + HasSqlType&lt;T23&gt; + HasSqlType&lt;T24&gt; + HasSqlType&lt;T25&gt; + HasSqlType&lt;T26&gt; + HasSqlType&lt;T27&gt; + HasSqlType&lt;T28&gt; + HasSqlType&lt;T29&gt; + HasSqlType&lt;T30&gt; + HasSqlType&lt;T31&gt; + Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(\n    _: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n) -&gt; &lt;__DB as TypeMetadata&gt;::TypeMetadata</h4></section></summary><div class='docblock'>Fetch the metadata for the given type <a>Read more</a></div></details></div></details>","HasSqlType<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0,)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0,)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt; + QueryMetadata&lt;T23&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt; + QueryMetadata&lt;T23&gt; + QueryMetadata&lt;T24&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt; + QueryMetadata&lt;T23&gt; + QueryMetadata&lt;T24&gt; + QueryMetadata&lt;T25&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt; + QueryMetadata&lt;T23&gt; + QueryMetadata&lt;T24&gt; + QueryMetadata&lt;T25&gt; + QueryMetadata&lt;T26&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt; + QueryMetadata&lt;T23&gt; + QueryMetadata&lt;T24&gt; + QueryMetadata&lt;T25&gt; + QueryMetadata&lt;T26&gt; + QueryMetadata&lt;T27&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt; + QueryMetadata&lt;T23&gt; + QueryMetadata&lt;T24&gt; + QueryMetadata&lt;T25&gt; + QueryMetadata&lt;T26&gt; + QueryMetadata&lt;T27&gt; + QueryMetadata&lt;T28&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt; + QueryMetadata&lt;T23&gt; + QueryMetadata&lt;T24&gt; + QueryMetadata&lt;T25&gt; + QueryMetadata&lt;T26&gt; + QueryMetadata&lt;T27&gt; + QueryMetadata&lt;T28&gt; + QueryMetadata&lt;T29&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29,+T30)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29,+T30)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt; + QueryMetadata&lt;T23&gt; + QueryMetadata&lt;T24&gt; + QueryMetadata&lt;T25&gt; + QueryMetadata&lt;T26&gt; + QueryMetadata&lt;T27&gt; + QueryMetadata&lt;T28&gt; + QueryMetadata&lt;T29&gt; + QueryMetadata&lt;T30&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29,+T30,+T31)%3E-for-__DB\" class=\"impl\"><a href=\"#impl-QueryMetadata%3C(T0,+T1,+T2,+T3,+T4,+T5,+T6,+T7,+T8,+T9,+T10,+T11,+T12,+T13,+T14,+T15,+T16,+T17,+T18,+T19,+T20,+T21,+T22,+T23,+T24,+T25,+T26,+T27,+T28,+T29,+T30,+T31)%3E-for-__DB\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, __DB&gt; QueryMetadata&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31)</a>&gt; for __DB<div class=\"where\">where\n    __DB: Backend + QueryMetadata&lt;T0&gt; + QueryMetadata&lt;T1&gt; + QueryMetadata&lt;T2&gt; + QueryMetadata&lt;T3&gt; + QueryMetadata&lt;T4&gt; + QueryMetadata&lt;T5&gt; + QueryMetadata&lt;T6&gt; + QueryMetadata&lt;T7&gt; + QueryMetadata&lt;T8&gt; + QueryMetadata&lt;T9&gt; + QueryMetadata&lt;T10&gt; + QueryMetadata&lt;T11&gt; + QueryMetadata&lt;T12&gt; + QueryMetadata&lt;T13&gt; + QueryMetadata&lt;T14&gt; + QueryMetadata&lt;T15&gt; + QueryMetadata&lt;T16&gt; + QueryMetadata&lt;T17&gt; + QueryMetadata&lt;T18&gt; + QueryMetadata&lt;T19&gt; + QueryMetadata&lt;T20&gt; + QueryMetadata&lt;T21&gt; + QueryMetadata&lt;T22&gt; + QueryMetadata&lt;T23&gt; + QueryMetadata&lt;T24&gt; + QueryMetadata&lt;T25&gt; + QueryMetadata&lt;T26&gt; + QueryMetadata&lt;T27&gt; + QueryMetadata&lt;T28&gt; + QueryMetadata&lt;T29&gt; + QueryMetadata&lt;T30&gt; + QueryMetadata&lt;T31&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_metadata\" class=\"method trait-impl\"><a href=\"#method.row_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">row_metadata</a>(\n    lookup: &amp;mut &lt;__DB as TypeMetadata&gt;::MetadataLookup,\n    row: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;__DB as TypeMetadata&gt;::TypeMetadata&gt;&gt;,\n)</h4></section></summary><div class='docblock'>The exact return value of this function is considered to be a\nbackend specific implementation detail. You should not rely on those\nvalues if you not own the corresponding backend</div></details></div></details>","QueryMetadata<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31)>","podcast_crawler::schema::episode_rank::SqlType","podcast_crawler::schema::episodes::SqlType","podcast_crawler::schema::podcast_rank::SqlType","podcast_crawler::schema::podcasts::SqlType"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[182430]}